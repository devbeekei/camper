buildscript {
    dependencies {
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")
    }
}

plugins {
	id 'org.springframework.boot' version '2.3.12.RELEASE'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.ss'
version = '0.1'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

// Spring REST Docs Setting
ext {
    snippetsDir = file('build/generated-snippets')
    docsDir = file('src/docs/asciidoc')
}
asciidoctor {
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    dependsOn test
    attributes 'docsDir': docsDir
}
bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'src/main/resources/static/docs'
    }
    archivesBaseName = 'camper'
    archiveFileName = 'camper.jar'
    archiveVersion = "0.0.1"
}
test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // JDBC
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    // MySQL
    runtimeOnly 'mysql:mysql-connector-java'

    // H2 Database
    implementation 'com.h2database:h2'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // JWT
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // OAuth2
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"

    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // ehcache
    implementation group: 'org.hibernate', name: 'hibernate-ehcache', version: '5.4.27.Final'

    // AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Lang
    implementation 'org.apache.commons:commons-lang3:3.11'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ModelMappder
    implementation 'org.modelmapper:modelmapper:2.4.4'

    // Spring REST Docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'
    annotationProcessor 'com.querydsl:querydsl-apt'
}

// Querydsl Plugin 설정
apply plugin: 'com.ewerk.gradle.plugins.querydsl'
// Q파일 생성 위치
def querydslSrcDir = "src/main/generated"
querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}
sourceSets { main.java.srcDirs = ['src/main/java', querydslSrcDir] }
configurations { querydsl.extendsFrom compileClasspath }
clean { delete file(querydslSrcDir) } // gradle clean Q파일 삭제
compileQuerydsl { options.annotationProcessorPath = configurations.querydsl }
tasks.withType(JavaCompile) { options.annotationProcessorGeneratedSourcesDirectory = file(querydslSrcDir) }